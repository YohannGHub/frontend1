import React, { useState } from 'react';
import {
  Zap, Play, Shield, AlertTriangle, Search, Filter,
  Eye, Settings, Info, Key
} from 'lucide-react';
import toast from 'react-hot-toast';
import { authFetch } from '../utils/authFetch';

const Exploits: React.FC = () => {
  const [selectedTarget, setSelectedTarget] = useState('');
  const [selectedService, setSelectedService] = useState('ftp');
  const [selectedTool, setSelectedTool] = useState<string | null>(null);
  const [isRunningExploit, setIsRunningExploit] = useState(false);
  const [exploitResults, setExploitResults] = useState<string>('');

  const exploitTools = [
    {
      id: 'metasploit',
      name: 'Metasploit',
      description: 'Framework d\'exploitation de failles',
      icon: Zap,
      color: 'bg-purple-500',
      category: 'Exploitation Framework'
    },
    {
      id: 'hydra',
      name: 'Hydra',
      description: 'Bruteforce login FTP/SSH/HTTP',
      icon: Key,
      color: 'bg-orange-500',
      category: 'Brute Force'
    }
  ];

  const handleStartExploit = async (toolId: string, toolName: string) => {
    if (!selectedTarget.trim()) {
      toast.error('Veuillez entrer une IP cible.');
      return;
    }

    setSelectedTool(toolId);
    setIsRunningExploit(true);
    toast.loading(`Exécution ${toolName}...`);

    try {
      const res = await authFetch('/api/scans/execute', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          target_ip: selectedTarget.trim(),
          scan_type: toolId,
          service: selectedService
        })
      });

      const data = await res.json();

      if (data.scan_output) {
        toast.success(`${toolName} terminé`);
        setExploitResults(data.scan_output);
      } else {
        toast.error('Erreur : ' + (data.message || ''));
        setExploitResults('');
      }
    } catch (err) {
      toast.error('Erreur de communication');
      console.error(err);
    } finally {
      setIsRunningExploit(false);
      setSelectedTool(null);
    }
  };

  const ToolCard = ({ tool }: { tool: any }) => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-all duration-200 group">
      <div className="flex items-start justify-between mb-4">
        <div className={`p-3 rounded-lg ${tool.color} group-hover:scale-110 transition-transform duration-200`}>
          <tool.icon className="h-6 w-6 text-white" />
        </div>
        <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">{tool.category}</span>
      </div>

      <h3 className="text-lg font-semibold text-gray-900 mb-2">{tool.name}</h3>
      <p className="text-gray-600 text-sm mb-4">{tool.description}</p>

      {tool.id === 'hydra' && (
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Service ciblé</label>
          <select
            value={selectedService}
            onChange={(e) => setSelectedService(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-400"
          >
            <option value="ftp">FTP</option>
            <option value="ssh">SSH</option>
            <option value="http-get">HTTP GET</option>
            <option value="rdp">RDP</option>
          </select>
        </div>
      )}

      <div className="flex items-center space-x-2">
        <button
          onClick={() => handleStartExploit(tool.id, tool.name)}
          disabled={isRunningExploit && selectedTool === tool.id}
          className={`flex items-center px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200 ${
            isRunningExploit && selectedTool === tool.id
              ? 'bg-gray-400 cursor-not-allowed'
              : `${tool.color} hover:opacity-90`
          }`}
        >
          <Play className="h-4 w-4 mr-2" />
          {isRunningExploit && selectedTool === tool.id ? 'En cours...' : 'Exploiter'}
        </button>
      </div>
    </div>
  );

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Framework d'Exploitation</h1>
          <p className="text-gray-600 mt-1">Lancez des attaques ciblées sur des services</p>
        </div>
        <div className="flex items-center space-x-2 text-sm">
          <AlertTriangle className="h-5 w-5 text-red-500" />
          <span className="text-red-600 font-medium">Utiliser uniquement sur des cibles autorisées</span>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Cible</h2>
        <input
          type="text"
          value={selectedTarget}
          onChange={(e) => setSelectedTarget(e.target.value)}
          placeholder="192.168.1.134"
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {exploitTools.map(tool => (
          <ToolCard key={tool.id} tool={tool} />
        ))}
      </div>

      {exploitResults && (
        <div className="bg-white rounded-xl shadow border border-gray-300 p-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Résultat</h2>
          <pre className="text-sm text-gray-800 whitespace-pre-wrap">{exploitResults}</pre>
        </div>
      )}
    </div>
  );
};

export default Exploits;
